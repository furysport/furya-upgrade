syntax = "proto3";

package furya.intertx;

option go_package = "github.com/furysport/furya-upgrade/x/intertx/types";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Msg defines the intertx Msg service.
service Msg {
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);
  // SubmitTx defines a rpc handler for MsgSubmitTx
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse);
}

// MsgRegisterAccount defines the payload for Msg/RegisterAccount
message MsgRegisterAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the actor that sends the message
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  string connection_id = 2 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
  string version = 3;
}

// MsgRegisterAccountResponse defines the response for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx defines the payload for Msg/SubmitTx
message MsgSubmitTx {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the actor that sends the message
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  string connection_id = 2 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
  string memo = 3 [ (gogoproto.moretags) = "yaml:\"memo\"" ];
  uint64 timeout = 4 [ (gogoproto.moretags) = "yaml:\"timeout\"" ];
  repeated google.protobuf.Any msgs = 5;
}

// MsgSubmitTxResponse defines the response for Msg/SubmitTx
message MsgSubmitTxResponse { uint64 sequence = 1; }